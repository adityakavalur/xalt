#!/bin/bash
#-*- shell-script -*-
#
#  MAGIC_STRING__XALT__XALT__MAGIC_STRING
#
# Git Version: @git@

#-----------------------------------------------------------------------
# XALT: A tool that tracks users jobs and environments on a cluster.
# Copyright (C) 2013-2014 University of Texas at Austin
# Copyright (C) 2013-2014 University of Tennessee
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of 
# the License, or (at your option) any later version. 
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser  General Public License for more details. 
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA
#-----------------------------------------------------------------------

##########################################################################
#
# ld wrapper: Add XALT "watermark" to executable or shared library.
#             Then run real ld, with trace.  Save the link trace
#             into an XALT link record.
#
##########################################################################


unset LD_PRELOAD
XALT_LD_LIBRARY_PATH=@xalt_ld_library_path@
XALT_DIR=@xalt_dir@
XALT_BIN=$XALT_DIR/bin
XALT_ETC_DIR=@etc_dir@
HAVE_DCGM=@have_dcgm@
MY_NAME=$(XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ basename $0)
MY_DIR=$(XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ dirname $(XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ readlink -f $0))

declare -l XALT_TRANSMISSION_STYLE

if [ -z "${XALT_FILE_PREFIX+x}" ]; then
    XALT_FILE_PREFIX=@xalt_file_prefix@
fi

if [[ "${XALT_FILE_PREFIX}" == "USER_DIR" ]];then
    if [[ -z "${USER_DIRNAME+x}" ]]; then
        USER_DIRNAME=@user_dirname@@
    fi
fi

if [ -z "${XALT_PRELOAD_ONLY+x}" ]; then
    XALT_PRELOAD_ONLY=@preload_only@
elif [ "${XALT_PRELOAD_ONLY:-}" != no ]; then
   XALT_PRELOAD_ONLY=yes
fi

if [ -z "${XALT_TRANSMISSION_STYLE+x}" ]; then
   XALT_TRANSMISSION_STYLE=@transmission@
fi

if [ -z "${XALT_FUNCTION_TRACKING+x}" ]; then
   XALT_FUNCTION_TRACKING=@xalt_function_tracking@
elif [ "${XALT_FUNCTION_TRACKING:-}" != no ]; then
   XALT_FUNCTION_TRACKING=yes
fi

source $MY_DIR/xalt_helper_functions.sh

##########################################################################
# Check for user requested tracing.
request_tracing "$@"  # This returns ${argA[@]} and XALT_TRACING=yes/no/link
tracing_msg "Starting ld"

########################################################################
# Search for the command  and make sure that you don't find this one.

EXEC_X=/usr/bin/${MY_NAME}.x
find_real_command $0 $EXEC_X # this command sets $MY_CMD


########################################################################
# Loop over command line arguments to ld. This code is used instead of
# getopt and others because this wrapper script should not try to know
# all the options to ld. Instead we are just "cherry-picking" the options
# we want to know about.

counter=0
PARTIAL_LINKING=
printOptA=()
PrintOptions=
EXEC="a.out"
append=false
prev=
done=false
BIT32FLAG=
GCC32FLAG=
for option
do
  if [ -n "$prev" ]; then
    eval "$prev=\$option"
    prev=
    continue
  fi

  
  counter=$((counter+1))

  case "$option" in
    -*=*) optarg=`builtin echo "$option" | sed  's/[-_a-zA-Z0-9]*=//'` ;;
    -*) optarg=;;
    *) optarg=; done=true;;
  esac
  
  case $option in
    --version|-v|--help)
      $MY_CMD "${argA[@]}"
      exit $?
      ;;
    --trace|-t)
      USER_TRACE="true"
      ;;

    elf_i386)
      BIT32FLAG=-32
      GCC32FLAG=-m32
      ;;

    -M|--print-map|--print-output-format|--print-memory-usage)
      PrintOptions="true"
      printOptA+=("$option")
      ;;

    -o)
      prev='EXEC'
      ;;

    -shared)
      SHARED_LIB=true
      ;;

    -r)
      PARTIAL_LINKING=true
      ;;
  esac

  #####################################################################
  # This code below is commented out.  Since this script is not parsing
  # all options the done flag won't work.

  #if [ "$done" = "true" ]; then
  #  break;
  #fi

done

############################################################
# if ld was called with no arguments then let the real ld
# handle it:

if [ "$counter" = 0 ]; then
    $MY_CMD "${argA[@]}"
    exit $?
fi



############################################################
# See if the print options need to be merged
if [ -n "$USER_TRACE" -a -n "$PrintOptions" ]; then
    printOptA+=("--trace")
    unset USER_TRACE
fi
    
############################################################
# Test to see if the executable is an autoconf or cmake build
# => skip those.

SKIP=
case "$EXEC" in
  conftest)
    SKIP=true;;
  cmTryCompileExec[0-9]*)
    SKIP=true;;
  cmTC_[a-f0-9]*)
    SKIP=true;;
esac
if [ -z "$HOME" -o -z "$USER" ]; then
   SKIP=true
fi

if [ "$XALT_EXECUTABLE_TRACKING" != yes -o "$SKIP" = true -o "$PARTIAL_LINKING" = true ]; then
  tracing_msg "No JSON Record: XALT_EXECUTABLE_TRACKING: $XALT_EXECUTABLE_TRACKING, SKIP: \"$SKIP\", HOME: \"$HOME\", USER: \"$USER\", PARTIAL_LINKING: \"$PARTIAL_LINKING\""
  $MY_CMD "${argA[@]}"
  status=$?
  exit $status
fi

MY_HOSTNAME_PARSER_STRING=@my_hostname_parser@
MY_HOSTNAME_PARSER_KIND=${MY_HOSTNAME_PARSER_STRING%%:*}

XALT_INC=$XALT_DIR/include
XALT_LIBEXEC_DIR=$XALT_DIR/libexec
XALT_SITE_DIR=$XALT_DIR/site
GEN_WATERMARK=$XALT_LIBEXEC_DIR/xalt_generate_watermark
GEN_LINKDATA=$XALT_LIBEXEC_DIR/xalt_generate_linkdata
STRIP_LINKLIB=$XALT_LIBEXEC_DIR/xalt_strip_linklib
EXTRACT_LINKER=$XALT_LIBEXEC_DIR/xalt_extract_linker
SYS_HOST_CMD=$XALT_BIN/xalt_syshost
REALPATH=$XALT_LIBEXEC_DIR/xalt_realpath
SYSHOST=$(XALT_EXECUTABLE_TRACKING=no LD_LIBRARY_PATH=$XALT_LD_LIBRARY_PATH $SYS_HOST_CMD)
UUIDGEN=$XALT_LIBEXEC_DIR/my_uuidgen
XALT_RMAP_EXISTS=$XALT_LIBEXEC_DIR/xalt_rmap_exists

UUID=$(XALT_EXECUTABLE_TRACKING=no $UUIDGEN)
WRKDIR=$(XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ mktemp -d "${USER}_${UUID}_XXXXXX" -p /tmp)
LINKLINE_OUT=$WRKDIR/link.txt
LINKLINE_ERR=$WRKDIR/link.err
ARGSRC=$WRKDIR/xalt.s
ARGOBJ=$WRKDIR/xalt.o
FUNCRAW=$WRKDIR/funcraw.txt
FUNCLIST=$WRKDIR/funclist.txt

if [ -z "$BIT32FLAG" ]; then
  XLD=$XALT_DIR/lib64
  XALT_OBJ_TYPE=o
else
  XLD=$XALT_DIR/lib
  XALT_OBJ_TYPE=o32
fi
SYSLIBS="-ldl -lz -lm -lc"
XALT_INIT_ROUTINE_OBJ="$XLD/xalt_initialize_regular.$XALT_OBJ_TYPE $XLD/librun_submission.a $SYSLIBS"
  
# Get the compiler information
COMP_T=$(XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ LD_LIBRARY_PATH=$XALT_LD_LIBRARY_PATH $EXTRACT_LINKER)
tracing_msg "COMP_T:" $COMP_T 
tracing_msg "SYSHOST:" $SYSHOST
tracing_msg "WRKDIR:" $WRKDIR

EPOCH=$(XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ LD_LIBRARY_PATH=$XALT_LD_LIBRARY_PATH $GEN_WATERMARK "$UUID" "$SYSHOST" "$ARGSRC" "$COMP_T")
tracing_msg EPOCH "$EPOCH"

# If the $ARGSRC exists then build it
# otherwise don't try to link with it.
OBJ=$ARGOBJ
if [ -f "$ARGSRC" ]; then
  as $ARGSRC $BIT32FLAG -o $OBJ
else
  OBJ=""
fi

trap "{ PATH=@xalt_system_path@ rm -rf $WRKDIR; }" EXIT SIGINT SIGTERM

###################################################################
# start a subshell in the background for the intentional
# failed link for function tracking
function_tracking()
{
  if [ "$XALT_FUNCTION_TRACKING" = "yes" ];  then
     if $XALT_RMAP_EXISTS ; then
     	StripA=( $(LD_LIBRARY_PATH=$XALT_LD_LIBRARY_PATH $STRIP_LINKLIB "${argA[@]}") )
     	tracing_msg "Using ld to find functions: " $MY_CMD "${StripA[@]}" --unresolved-symbols=report-all -o /dev/null
     	XALT_EXECUTABLE_TRACKING=no $MY_CMD "${StripA[@]}" --unresolved-symbols=report-all -o /dev/null > $FUNCRAW 2>&1
     else
        touch $FUNCRAW
        tracing_msg "Function Tracking is disabled: no reserveMap files"
     fi
  else
     touch $FUNCRAW
     tracing_msg "Function Tracking is disabled by configuration or env. vars."
  fi
}

function_tracking

#############################################################
# If the user requested print options such as --print-map
# then run link again with those options

if [ -n "$PrintOptions" ]; then
    tracing_msg "Having Printing Options:" $MY_CMD "${printOptA[@]}" "${argA[@]}"
    $MY_CMD "${printOptA[@]}" "${argA[@]}"
fi

LIBDCGM=

#############################################################
#  Only use the dcgm library for 64bit apps not for 32bit apps
if [ "$HAVE_DCGM" = "yes" -a -z "$BIT32FLAG" ]; then
    LIBDCGM="-ldcgm"
fi

#############################################################
#  do not include xalt_initialize.*, -luuid, etc when building
#  a shared library. Also do not add when in PRELOAD_ONLY mode

if [ "$SHARED_LIB" = true -o "$XALT_PRELOAD_ONLY" = yes ]; then
    XALT_INIT_ROUTINE_OBJ=
    LIBDCGM=
    tracing_msg "Not adding XALT initialize routines to user code"
fi


tracing_msg "$MY_CMD "${argA[@]}" $OBJ $XALT_INIT_ROUTINE_OBJ  $LIBDCGM -t > $LINKLINE_OUT  2>&1"
$MY_CMD "${argA[@]}" $OBJ $XALT_INIT_ROUTINE_OBJ  $LIBDCGM -t > $LINKLINE_OUT  2>&1
status=$?

if [ ! -f "$EXEC" -o $status -ne 0 ]; then
   tracing_msg "Bad status when capturing tracing link output"
   tracing_msg $MY_CMD "${argA[@]}" $OBJ $XALT_INIT_ROUTINE_OBJ $LIBDCGM 
   $MY_CMD "${argA[@]}" $OBJ $XALT_INIT_ROUTINE_OBJ $LIBDCGM 
   exit $status
fi

EXEC=$(XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ $REALPATH "$EXEC")


if [ -n "$USER_TRACE" ]; then
  PATH=@xalt_system_path@ cat $LINKLINE_OUT | PATH=@xalt_system_path@ grep -v $ARGOBJ 
fi

# Get the sha1sum for the executable because it might move or disappear!
SHA1SUM_EXEC=$(XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ sha1sum "$EXEC")

wait #-- wait for subshell to finish

tracing_msg XALT_TRANSMISSION_STYLE $XALT_TRANSMISSION_STYLE

###################################################################
# Generate link data.  
SHA1=$(echo $SHA1SUM_EXEC | sed -e 's|  */.*||')

XALT_EXECUTABLE_TRACKING=no PATH=@xalt_system_path@ LD_LIBRARY_PATH=$XALT_LD_LIBRARY_PATH $GEN_LINKDATA "$UUID" "`pwd`" "$SYSHOST" "$EXEC" "$SHA1" "$ARGOBJ" "$EPOCH" "$FUNCRAW" "$LINKLINE_OUT" "$COMP_T"

exit $status
